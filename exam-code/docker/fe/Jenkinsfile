pipeline {
    /*agent {
        docker {
            image 'python:3.10'
        }
    } */
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-creds')
        DOCKER_REGISTRY = 'gald10102'
        REPO_NAME = 'fe-exam'  // Change to 'be-exam' for backend pipeline
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'workshop/argo-jenkins-exam', url: 'https://github.com/gald10102/devopshift-welcome.git'
            }
        } //end of clone stage
        stage('Lint & Security Scan') {
            steps {
                //running flake on fe 
                sh """
                    pip install flake8 bandit
                    cd exam-code/docker/fe/src
                    flake8 . || true
                    bandit -r . || true
                """
                //sh 'cd exam-code/docker/fe'
                //sh 'ls -l'
               //flake8 /
            }
        }//end of lint&security stage
        stage('Install Dependencies') {
            steps {
                sh """
                    cd exam-code/docker/fe
                    pip install -r requirements.txt
                """
            }
        }//end of install dependencies stage
        stage('Build Docker Image') {
            //agent any
            steps {
                sh """
                    cd exam-code/docker/fe
                    docker build -t $DOCKER_REGISTRY/$REPO_NAME:$IMAGE_TAG .
                    docker tag $DOCKER_REGISTRY/$REPO_NAME:$IMAGE_TAG $DOCKER_REGISTRY/$REPO_NAME:latest
                """
            }
        }//end of build docker image stage
        stage('Run Tests in Container') {
              //agent any
            steps {
                sh """
                    docker run --rm $DOCKER_REGISTRY/$REPO_NAME:$BUILD_NUMBER pytest tests/
                """
            }
        }//end of Run Tests in Container stage
        stage('Integration Test with Docker Compose') {
            steps {
                sh """
                    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose
                    cd exam-code/docker
                    ls -l
                    docker-compose up -d
                    sleep 10  # Allow services to start
                    curl -f http://localhost:5002 || exit 1  # Adjust for backend if needed
                    docker-compose down
                """
            }
        }//end of Integration Test with Docker Compose stage
    }
}
